2022-03-15
# 지난시간 정리
[1단계:개념] 1. 스프링 boot vue의 기본 개발 환경 구성을 위한 설정을 기술하세요.
	1) 초기에 프로젝트 만들시, gradle 환경에서 lib 설정 처리. build
	2) 기본 환경 구성 설정 (컨테이너)
		application.properties  : 서버포트, DB 정보(연결정보), mybatis의 설정 파일 위치지정
	3) config 파일 설정 - MvcConfiguration.java/MybatisConfig.java
		# MvcConfiguration.java
		경로 설정
			template : controller단에서 초기로딩할 html 파일
			static : 공통 css/js/img 파일 설정 위치를 지정
		여러가지 view단 호출 
			json데이터 view 선언.
		# MybatisConfig.java
		mybatis 관련
[1단계:개념] 2. vue를 통해 backend 데이터 연동시 처리할 내용의 순서를 기술하세요.
	1) 초기화면 호출 : 기본화면 처리
	2) ajax 데이터 처리 요청 메서드 선언 :
		MvcConfiguration 에서 선언한 view로 호출
		@RestController를 활용하면
			public Person getPerson(){
				return service.getPerson(); 
			}
			자바의 일반 객체나 List<Person> 형태의 객체를 json 형태로 변경처리한다.
	3) 초기 화면(view)에서 ajax 처리
		Vue 인스턴스 객체에서 이벤트를 통해서
		받은 데이터를 모델데이터와 연동해서 처리하여 화면에 출력 한다.
		<tr v-for="단위객체 in 모델객체"><td>{{단위객체.속성}}</td>
[1단계:개념] 3. vue의 ajax를 통해 요청값을 전달하고, 특정 속성값(DB처리, 로직)을 
			처리하는 방식을 기술하세요.
	<input v-model="bsch.title" @keyup.13="search"><input v-model="bsch.writer" @keyup.13="search">
		@keyup.13="search" : 입력한 후, enter키를 입력시, 기능 함수 search가 호출	
	new Vue({
		data:{bsch:{title:"",writer:""},blist:[]},
		methods:{
			search:function(){
				var vm = this; // 현재 Vue인스턴스 객체가 기능 메서드나 객체에 포함되더라도 사용할 수 있게 변수 지정
				$.ajax({
					url:"호출할 controller단",
					data:vm.bsch,  // 입력한 요청값 title, writer를 전달 처리
					dataType:"json",
					success:fuction(data){
						vm.blist = data.blist;
						// 해당 controller의 모델명 blist를 현재 vue의 인스턴스 모델 데이터 blist에 할당
						// 처리
					}				
				})
			}
		}
	});		
	화면 : <tr v-for="bd in blist"><td>{{bd.no}}</td><td>{{bd.title}}</td><td>{{bd.writer}}</td>...			

# 주요학습범위ㅡ
1. 스프링 boot와 vue를 연동하는 게시판 조회화면(컴포넌트 활용)

2. 스프링을 이용하여 채팅을 처리
# 생각해봅시다.
1. vue에서 component 통한 데이터 전송 방식을 단계를 생각해보자.
	1) 속성값 형식으로 데이터 상위에서 하위에 전달 
		<template>
			<h2>{{속성명}}</h2> 하위	
		Vue.component({
			props:["속성명"]
		})
		<컴포넌트명 속성명="전달할데이터"> 상위
	2) 이벤트를 통해 하위에서 상위로 전달
		<template>
			<h2 @click="call"
		Vue.component({
			methods:{
				call:function(){
					this.$emit("상위이벤트",전달데이터1,전달데이터2...);
					this.$emit("click01",this.name, this,age);
				}
			}
		})		
		<컴포넌트명 상위이벤트="핸들러함수">
		<com01 click01="parentEvnt">
		new Vue({
			methods:{
				parentEvnt:function(data1, data2){
					// this.$emit("click01",this.name, this,age);
					// 에서 넘겨진 데이터의 매개변수 를 data01, data2로 받을 수 있다.
					
				}
			}
		});
	3) 이벤트 버스를 통한 이벤트 공유
		var eventBus = new Vue();
			

2. 채팅은 어떤 통신 방식을 이용할까?
3. 


# 학습목표
1. 스프링 boot를 백앤드로 처리하여 vue의 계층형 컴포넌트와 데이터 처리 관계를 이해하고 코딩할 수 있다.
2. 웹 개발에서 채팅을 처리하기 위한 환경 설정을 이해하고, 메시지 전송 처리를 위한 backend처리와 frontend처리를 이해하고 활용할 수 있다. 

 	
# 주요핵심 keyword

# 주요 진행계획(학습 단계별 체계화)
1. 학습지침 
	1) 전체 핵심 내용을 이해하고, 간단한 코드로 확인한다.
	2) 각 내용을 내용 계열화를 통해 연관되어 이해를 한다.
	3) 세부 내용을 기능 메서드의 기능을 확인하고 진행한다.
	4) 조원들과 내용에 대하여 이야기 하면서 진행한다.
	5) 수업 진행에 중점, 조별과제 진행
2. 지난 내용 리뷰
3. 프로젝트 피드백
	# 공통 피드백 사항.
	1. 초기화면
		프로젝트명(이름 PMS), 이미지, 
		@@@ 소속과 @@@조.
	2. 핵심기술
		업무위주보다 프로그래밍 기술 
			- 스프링 MVC, ajax, vue, fullcalendar api 활용
			내용과 실제 적용 화면 소스
	3. 화면설계서 및 회의록은 양식을 지정 처리
	3. 초기 타이틀 화면 한장 필요 : 이미지, 프로젝트명(적절한 이름), @@조 정도
6. 프로젝트 진행 14:00~
	# 주간 요청 사항 확인
	# 프로젝트 2주차 진행
	- 지난주 피드백 사항 전달
	- 금주 일정 계획 내용 
	- 조별 피드백 일정 확인
# 추후 일정
1. 서버 구축
	1) 클라우드 환경 서버 구축(완료)
		aws	
2. 프런트 단 : 
	vue - 기본(완료)
3. 스프링 수업
	- dynamic web project : 스프링 환경(완료)
	- 기타 실무 예제
		파일업로드/다운로드(완료)	
	    게시판(파일업로드, 답변, 페이징처리)(완료)
		# ajax 처리 : fullcalendar(jquery lib)(완료)
		# 메일 전송 (완료)
		# 채팅
		# 다국어 처리
		aop
		배치프로그래밍
		aws 활용 실무 - 리눅스 환경, 기타 인스턴스 객체
	- 스프링 boot
	    타임리프 - emp 조회 처리(완료)	
		vue 환경 게시판 예제 진행
# 요청사항 및 협의사항 진행
1. 프로젝트 진행시 수업시간 및 내용 결정
	- 나머지 수업 진도 (오전 진행)
	- 추후 시간, 과목과 내용(협의 진행)
# 조별과제 진행 점검
1.  진행 플로우 점검
	- 전체
	- 주단위
		전주(금) - 다음 주 진행할 일정계획 및 담당자 확인,
				  발표 feedback 사항 및 변경 및 개선사항 정리
				  진행에 필요한 내용 점검(조장/조원), 진행 계획 수립
		월 - 개선사항 적용 템플릿 점검(조별활동시간)
			text로 개선사항 내용과 함께 ppt의 페이지를 표기해서 전달 부탁드립니다.
		화 - 조별 상세 피드백(설계, 코드, 발표 자료 등)
	    수 - 조별 상세 피드백(설계, 코드, 발표 자료 등)
	    목 - 최종 발표 및 산출물(소스 및 진행 내용) 자료 제출
	    금 - 발표/발전사항 점검
# 평가/정리
- 다음 날 진행.

# 공지
1. 프로젝트 기본 일정
	1) 주요 지침
		- 매주 조별 코드리뷰/단위테스트 진행, 진행 내용 및 일정계획 발표
			회의록, 근거 자료 정리
		- 리스크(일정지연/에러 등) 관리 - 매일 진척내용 확인
	2) 주요 지침
		- 일정 마일 스톤을 반드시 지킨다. 매주 발표, 매일 진행 feedback 받을 수 있도록 일정 잡기	
			계획/진행/점검 및 대안
		- 리스크가 있을 시, 사전에 이야기하고 해결할 수 있도록 한다.			
		- 개인별로 조별로 일정을 효과적으로 진행할 프로세스를 만들어 진행한다.
		- 매주 진행 내용에 대한 코드리뷰/단위테스트를 하고 해당 내용을 근거자료를 만들어서 발표시 나타낸다.
		- 주차별 주된 내용을 기준으로 통합해서 진행
			설계, 프런트단, 백앤드단, 문서 작업 등을 병행하면서 진행할 수 있도록 한다.
		- 데이터를 반드시 의미있는 데이터를 입력 해서, 진행하도록 한다.
			충분한 데이터 입력하여 화면구성을 확인할 수 있도록 한다.
		- 조별로 협의된 사항 ex) 소스자료 공유/기술 공유/ppt 발표자료 공유	
	3) 주차별 일정 계획(표준 마일스톤)
		- 1주차 설계/분석/공통모듈
			일정계획, 프로젝트 ppt 템플릿(항목), 개발 환경구축
		- 2주차 설계분석(DB, 화면)완료, 프런트단, 백앤드(공통), 초기화면 완성,
				로그인, 사용자 관리, 세션관리 완성), 단위테스트 시작  
		- 3주차 백앤드 진행, 간트 처리 완료, 다국어처리 완료 단위테스트 2
		- 4주차 백앤드 진행, 데쉬보드, 채팅완료, 메인 개발 진행 완료, 단위 테스트 3
		- 5주차 정리/통합테스트(조별로 크로싱테스트)
			- 각 조별로 통합테스트 시나리오 작성하여 테스트를 한다.
			- 최종리허설/최종발표			
# 마지막 프로젝트 주요 목차(ppt)
1. 프로젝트 소개
	- 개요
	- 범위
	- 개발환경
	- 핵심기술
		주요기술 소개 및 적용 내용(소스 및 화면 캡쳐)
2. 팀소개	
	- 역할분담
	- WBS 
3. 설계
	- 요구사항정의서
	- DB
	- 화면설계 : 유효성, 권한 표기
4. 구현
	- 구현된 화면, 소스코드
5. 테스트
	- 단위테스트
	- 통합테스트
6. 진행산출물
	- 일정계획 및 진행 결과
	- 회의록
7. 최종 발전사항 