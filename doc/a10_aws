# aws 개발 환경 구축
1. 필요로 하는 기술
	1) aws 계정 생성 및 접근
		 ec2, s3
		 접근보안ssh 보안
		 방화벽설정 : 일단 웹서비스를 할 수 있는 port를 열어서 처리할 수 있게 한다.
	2) 서버에 접근하는 툴
		- putty	 다운 로드 설치
			보안키 설정 - puttygen
	3) 접근 후 명령(리눅스, ubuntu)
		- 계정 접속,
		- 파일 접근 방법 (경로변경, 파일 복사/이동, text파일 수정)
		- 압축풀기, 명령어에 의해서 파일 다운로드 하기
		- 권한에 따른 처리
		- 소프트웨어 설치 위치
			open jdk 15
			tomcat 9.0 (리눅버젼)	
			https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.58/bin/apache-tomcat-9.0.58.tar.gz
	4) 실제 프로젝트 배포 처리
		- dynamic web project
		- spring boot
2. aws ec2를 활용한 배포하기.
	0) 필요한 tool : 구글 putty 검색 설치..
	1) 계정 생성
	2) 로그인 ec2 확인
	---------------------
	3) 인스턴스 생성
	4) 보안 key 생성
	5) 보안 방화벽 설정 : 외부에서 해당 aws 운영체제에 접근해서 해당 서비스를 지원 받기 위해서
			설정한다.
		22 포트는 열려 있습니다. : ssh 즉, text 콘솔창에 의해서 명령을 처리
		외부에서 8080포트를 통해 접근할 수 있게 처리 :
				 apache tomcat 웹 서비스를 확인할 수 있게 처리
		0.0.0.0/0, ::/0
		
		
	6) putty gen을 통한 private key 생성
		ec2의 *.pem
		해당 private key
			  *.ppk
		c:\javaexp\key\ 에 복사해 놓으세요..
		
	7) putty를 통한 ec2 운영서버에 접속
	ec2-13-125-49-156.ap-northeast-2.compute.amazonaws.com

	8) open jdk 설치하기, 환경 설정 하기..
		sudo -i
			관리자 권한 사용자
		sudo apt update
			apt list 업데이터
		cd ../..   
			최상위 root폴드로 이동
		pwd
			현재 경로 확인.	
		ls
			현재 경로에 있는 파일 리스트 확인
		cd usr
			폴드 이동
		mkdir java
		cd java
			java 폴드로 이동
		pwd
			현재폴드위치 확인
		wget https://download.java.net/openjdk/jdk15/ri/openjdk-15+36_linux-x64_bin.tar.gz
			해당 jdk 다운로드 처리..
		ls
		tar -xvf openjdk-15+36_linux-x64_bin.tar.gz	
			압축풀기..
		cd ..
		cd ..
			상위폴드로이동	
		sudo vi /etc/profile
		-----------------------------------
			path등록 파일 
		i
			insert모드로 변경 
			를 클릭해서 insert모드로 변경
			오른쪽마우스 클릭..
export JAVA_HOME=/usr/java/jdk-15
export PATH=$PATH:$JAVA_HOME/bin
			PATH를 지정하면 어떠한 경로에서든지 해당 경로에 있는 실행 파일(exe,bat)등을 
				활용할 수 있다.

		명령모드 변경 esc
		:wq
			저장 종료
		source /etc/profile
			path 환경설정한 내용을 적용
		java -version
			자바가 설치된 것을 확인..
		cd usr
		cd java
		wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.58/bin/apache-tomcat-9.0.58.tar.gz
		tar -xvf apache-tomcat-9.0.58.tar.gz
		ls
		cd apache-tomcat-9.0.58
		cd bin
		./startup.sh  : 톰캣 기동 명령어
다시 es2 화면에 가서 주소를 복사해서 조원들과 공유
	ec2-13-125-49-156.ap-northeast-2.compute.amazonaws.com:8080
	마지막에 8080붙여서 화면이 나오는지 확인..
	
	# dynamic webproject 만들기..
jspexp\src\main\webapp\WEB-INF\lib	
	하위 *.jar 파일 아래로 복사.	
project01\src\main\webapp\WEB-INF\lib		
		
springweb\src\main\webapp\a00_com
	폴드를			
project01\src\main\webapp
	로 복사하여 동일하게 만든다.			
project01\src\main\webapp\a00_com
				
	
	9) tomcat 설치하기
		- admin을 통한 파일(war) 배포를 위한 접근 권한 파일 설정.
		cd apache-tomcat-9.0.58/
		vi webapps/manager/META-INF/context.xml
		i
			인서트 코드 모드
		<!--

		  <Valve className="org.apache.catalina.valves.RemoteAddrValve"
		         allow="127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1" />
		
		-->
		esc
			명령모드
		:wq
			저장 종료
		vi conf/tomcat-users.xml
			한번더 확인	
		:q
			종료
		<role rolename="manager-gui"/>
		<user username="admin" password="admin" roles="manager-gui"/>	
		복사
		esc
		:wq
			명령모드에서 저장종료
		화살표 상/하위 키로 이전명령어 확인			
		cd bin
		ls
		./shutdown.sh		
		
		- tomcat 기동
		./startup.sh
		
	10) dynamic web 샘플만들기 
		- .war 배포를 위한 파일 만들기
		
		
		
	11) tomcat admin 권한 접근
		- war 파일 배포 처리하기
	12) 초기 웹 화면 확인하기.
	
	
	
	
	13) 스프링 개발 환경 dynamic web 프로젝트 
		# 주의
		1. 데이터베이스 서버 주소를 입력..
		2. 하단에 bean등록..
		 jdbc 접속시, GMT 시간 설정 컨테이너 등록
			package board.z01_util;
			@Controller
			public class GmtController {
				public GmtController() {
					// aws에서 jdbc접속시  gmt 시간 설정이 되어야 처리되기에 컨테이너
					// 메모리에 로딩.
					TimeZone tz=TimeZone.getTimeZone("Asia/Seouls");
					TimeZone.setDefault(tz);
				}
			}	
	

		- war 파일 만들기
		
		
		
	14) tomcat admin 권한 접근
		- war 파일 배포 처리하기
	
# 평가관련 참고 자료!!
아래 내용을 참고/인터넷 검색 하여서 평가 진행 부탁드립니다.  
완료된 조는 조장님이 메시지 주세요.
- 사용자의 직접적인 활발한 관리 없이 특히, 데이터 스토리지(클라우드 스토리지)와 컴퓨팅 파워와 같은 컴퓨터 시스템 리소스를 필요 시 바로 제공(on-demand availability)하는 것을 말한다.
- 일반적으로는 인터넷 기반 컴퓨팅의 일종으로 정보를 자신의 컴퓨터가 아닌 연결된 다른 컴퓨터로 처리하는 기술을 의미

클라우드 컴퓨터
공유 컴퓨터 처리 자원과 데이터를 컴퓨터와 다른 장치들에 요청 시 제공해준다.
구성 가능한 컴퓨팅 자원(예: 컴퓨터 네트워크, 데이터 베이스, 서버, 스토리지, 애플리케이션, 서비스, 인텔리전스)에 대해 어디서나 접근할 수 있는, 주문형 접근(on-demand availability of computer system resources)을 가능케하는 모델
최소한의 관리 노력으로 빠르게 예비 및 릴리스를 가능하게 한다.
사용자와 기업들에게 개인 소유나 타사 데이터 센터의 데이터를 저장, 가공하는 다양한 기능을 제공한다.

모놀리식 구조에서 클라우드 컴퓨팅으로 전환되는 가장 큰 이유
단순한 아키텍처 구조와 개발의 용이함이 큰 장점이지만 규모가 커짐에 따라 복잡도가 심각하게 증가

다음 중 클라우드 모델
폐쇄형 클라우드
공개형 클라우드
혼합형 클라우드
커뮤니티 클라우드

클라우드 컴퓨팅의 단점
서버가 공격당하면 개인정보가 유출될 수 있다.
재해에 서버의 데이터가 손상되면, 미리 백업하지 않은 정보는 되살리지 못하는 경우도 있다.
사용자가 원하는 애플리케이션을 설치하는 데에 제약이 심하거나 새로운 애플리케이션을 지원하지 않는다.
통신환경이 열악하면 서비스 받기 어렵다.


AWS가 전 세계에서 데이터 센터를 클러스터링하는 물리적 위치를 서버라고 합니다. 
논리적 데이터 센터의 각 그룹을 가용 영역이라고 합니다. 각 AWS 서버은(는) 지리적 영역 내에서 격리되고 물리적으로 분리된 여러 개의 AZ로 구성됩니다.

Amazon EC2는 각 사용 사례에 맞게 최적화된 다양한 인스턴스 유형을 제공합니다. Amazon EC2 인스턴스 유형
CPU
메모리
스토리지
네트워킹 용량

AWS EC2에서 Linux 볼륨의 개수
5, 10, 20, 30

AWS Linux 인스턴스 디바이스 이름에서 사용할 수 있는 가상화 유형
반가상화, 하드웨어 가상머신

AWS EBS 볼륨 사용의 이점
데이터 가용성 - 단일 하드웨어 구성 요소의 장애로 인한 데이터 손실을 방지하기 위해 해당 가용 영역 내에서 자동으로 복제됨.
데이터 지속성 - 종료 시 삭제 확인란을 선택하지 않은 경우 인스턴스가 종료될 때 해당 데이터가 원래 상태를 유지한 채로 해당 인스턴스에서 자동으로 분리되며, 해당 볼륨은 새 인스턴스로 재연결되어 빠른 복구가 가능함.
데이터 암호화 - 256비트 고급 암호화 표준 알고리즘(AES-256)과 Amazon 관리형 키 인프라를 사용함.
Flexibility - 서비스 중단 없이 볼륨 유형, 볼륨 크기를 수정할 수 있음.

리눅스 ls(list segments) 명령어의 옵션
ls -l : 파일들의 상세정보를 나타냄
ls -t : 파일들을 최근에 생성된 시간 별로 표시함.
ls -rt : 파일들을 오래된 시간부터 표시함.
ls -F : 파일을 표시할 때 마지막 유형을 타내는 파일명을 표시함(/-디렉토리, *-실행파일, @-링크)
	
	
	
	
	
					