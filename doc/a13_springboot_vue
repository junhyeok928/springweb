# 스프링 부트 뷰 연동 처리
1. 기본 환경 설정
	- gradle lib 환경 확인
		springvue\build.gradle
			implementation 'org.springframework.boot:spring-boot-starter-web'
			implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
			runtimeOnly 'com.oracle.database.jdbc:ojdbc8'
			testImplementation 'org.springframework.boot:spring-boot-starter-test'
	- 서버 port, DB 연동
		main\resources\application.properties
		# 서버포트지정
		server.port=5080
		spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
		spring.datasource.username=scott
		spring.datasource.password=tiger
		spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
		# mybatis
		mybatis.mapper-locations=classpath:mybatis/mapper/**.xml
		
	- front단 설정 파일 지정
		templates : 로딩한 html 파일 
		static : 공통적인 js/css/html 파일 설정 부분 폴드 지정.
		MvcConfiguration.java를 통해서 설정.
	- mybatis 설정 파일 지정
		MybatisConfig.java
			SqlSessionTemplate
		공통 Mybatis설정..
		src/main/resources/mybatis
			mapper
				boardMapper.xml
			mybatis.Spring.xml

사용하게될 view단에 대한 호출 경로
templates, static 폴드 위치 지정 
template : controller호출 할 main html 파일 
static : 공통 정적인 자원(css, js, 공통 html, image, lib).. 	
			
# 개발 순서
1. 프로젝트 생성시, 사용하게될 lib 선언
	- gradle 환경
	- jdbc, spring web, mybatis
2. 기본 정보 설정
	src\main\resources\application.properties
	서버포트, DB 정보, mapper 및 mybatis 공통 설정파일
3. config 설정 파일 선언
	com.web.vue.configuration 패키지 하위에
	MvcConfiguration.java/MybatisConfig 설정
	# 기본 설정위치지정
	- mybatis
		application.properties파일에 설정된 위치
		src\main\resources\mybatis\mybatis.Spring.xml
		src\main\resources\mybatis\mapper\boardMapper.xml
	- 웹화면호출 경로 설정
		MvcConfiguration.java 에서 설정된 위치
		src\main\resources\templates
		src\main\resources\static
	 
4. 초기 화면 로딩
	controller를 통해서 초기화면 호출..
	// http://localhost:5080/boardList
	@RequestMapping("boardList")
	public String boardList() {
		return "boardList.html";
			
	View단 : src\main\resources\templates\boardList.html
5. ajax에 의해 처리할 초기 데이터 선언 및 화면 로딩
	controller단 선언
	dao/mapper/service/controller
	// http://localhost:5080/boardData
	@RequestMapping("boardData")
	public String boardData(BoardSch sch, Model d) {
		d.addAttribute("blist", service.getBoardList(sch));
		return "jsonView";
	}	
6. vue를 통한 초기 데이터 로딩
	1) 초기 화면에서 ajax 데이터 로딩 확인
7. vue를 통한 검색 처리..
	- 이벤트 $.emit
	- 이벤트 버스선언과 이를 통한 처리..
	1) 검색 화면 ui만들기
	2) 이벤트 버스에 대한 이해를 위해 간단한 예제 처리하기
	3) 게시판 검색시, 처리하기
		
[1단계:개념] 1. vue를 통한 게시판에 사용되는 컴포넌트를 기술하고 속성값을 전달되는 데이터를 설명하세요
	조회 컴포넌트 : <sch-comp :sch="boardsch"> 속성 : sch, 넘겨주는 데이터, ajax를 통한 boardsch(모델데이터)
	조회된 리스트 컴포넌트 : <list-comp :blist="blist">
		속성 : blist, 넘겨주는 데이터, ajax의 최종데이터 blist
	페이지 처리 컴포넌트 : <page-comp :boardsch="boardsch">
		속성 : boardsch, 넘겨주는 데이터 ajax를 통한 boardsch		
 
[1단계:개념] 2. vue를 통한 게시판에서 vue의 이벤트버스를 통해 전달되는 이벤트와 데이터를 기술하세요
	 1. 이벤트 버스 선언: 컴포넌트와 vue인스턴스 간에 데이터를 이벤트와 함께 전달하는 처리를 하는 공유메모리 영역 설정.
	 2. 해당 컴포넌트에 이벤트 핸들러를 통해서 전달할 이벤트 버스를 선언.
	 	eventBus.$emit("이벤트버스명", 전달할데이터1, 전달할데이터2);
	 	이것을 받는 곳에서 이벤트 핸들러를 통해 매개변수로 데이터로 전달 할 수 있다.
	 3. 이 이벤트 버스의 내용을 받는 컴포넌트와 vue인스턴스에서는 created(라이프사이클 선언메서드)를 통해서, 이 이벤트
	 	버스의 내용을 선언한 현재 이벤트 핸들러 함수와 연결한다.
	 	eventBus.$on("이벤트버스명", this.이벤트핸들러함수);
	 4. 해당 컴포넌트와 vue인스턴스에서의 이벤트 핸들러 함수에서는 매개변수와 데이터를 처리한다.
	 	이벤트핸들러함수:function(전달되어온 데이터1, 전달되어온 데이터){
	 	} 	
[1단계:개념] 3. axios를 통한 비동기 처리 기본형식을 기술하세요.
	1) <script src="/a00_com/axios.js"></script>
	2) ajax 처리
		axios({
			method:"get/post",
			url:"요청 url",
			params:전송할매개변수값
		}).then((res)=>{
			res : 서버에서 전송되어온 데이터들.
			res.data : 서버에서 전송되어온 데이터들 가운데 json형식의 데이터
			res.data.객체 : json의 속성을 가지고 있는 객체		
		}).catch((error)=>{
			서버단에서 넘겨져온 에러 내용.
		})			
		
			
			
			
			